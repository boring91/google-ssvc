from typing import List, Literal, Optional

from evaluation_aggregators.base_evaluation_aggregator import BaseEvaluationAggregator
from evaluation_units.evaluation_unit import EvaluationResult, EvaluationUnit
from evaluation_units.state_of_exploitation.base_state_of_exploitation_evaluation_unit import \
    BaseStateOfExploitationEvaluationUnit
from evaluation_units.state_of_exploitation.gemini_state_of_exploitation_evaluation_unit import \
    GeminiStateOfExploitationEvaluationUnit
from evaluation_units.state_of_exploitation.kev_state_of_exploitation_evaluation_unit import \
    KevStateOfExploitationEvaluationUnit
from evaluation_units.state_of_exploitation.openai_state_of_exploitation_evaluation_unit import \
    OpenaiStateOfExploitationEvaluationUnit
from evaluation_units.state_of_exploitation.vulnrichment_state_of_exploitation_evaluation_unit import \
    VulnrichmentStateOfExploitationEvaluationUnit


class ExploitationEvaluationAggregator(BaseEvaluationAggregator):
    def __init__(self, llm: Literal['gemini', 'openai'] = 'gemini'):
        super().__init__(llm)
        self._units: List[BaseStateOfExploitationEvaluationUnit] = [
            KevStateOfExploitationEvaluationUnit(),
            VulnrichmentStateOfExploitationEvaluationUnit(),
            GeminiStateOfExploitationEvaluationUnit() if llm == 'gemini' else OpenaiStateOfExploitationEvaluationUnit()
        ]

    def _get_units(self) -> List[EvaluationUnit]:
        return self._units
