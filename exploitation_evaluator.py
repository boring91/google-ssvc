import re
import json
from typing import Literal, Optional

from cve_data_source_aggregator import CveDataSourceAggregator
from gemini_llm_client import GeminiLlmClient
from llm_client import LlmClient
from openai_llm_client import OpenAiLlmClient


class ExploitationEvaluator:
    def __init__(self, llm: Literal['gemini', 'openai'] = 'gemini'):
        self._llm_client: LlmClient = GeminiLlmClient() if llm == 'gemini' else OpenAiLlmClient()
        self._cve_data_source_aggregator = CveDataSourceAggregator()

    def evaluate(self, cve_id) -> Optional[dict]:
        cve_data = self._get_cve_data(cve_id)

        llm_response = self._llm_process(cve_id, cve_data)

        return _parse_llm_response(llm_response)

    def _get_cve_data(self, cve_id) -> str:
        cve_data = self._cve_data_source_aggregator.load(cve_id)
        return json.dumps(cve_data)

    def _llm_process(self, cve_id: str, cve_data: str) -> str:
        query = f"""
                   I will give you two pieces of information; a CVE ID and a json string containing 
                   information about the CVE. Your role is to determine the "State of Exploitation" 
                   for the given CVE ID. You should only answer with one of the following: 1) "none" 
                   if there are no exploits, 2) "poc" if there is a proof of concept for an 
                   exploitation or 3) "active" if the CVE is actively been or have been used in 
                   the wild. You answer should be formatted as a json object with two properties:
                   1) "cve_id" which contains the id of the cve in question, 2) "assessment" which can take one 
                   of the three previous values, 3) "description": explaining how you reached to the answer 
                   you provided in the "assessment" property (the description should not refer to the json data 
                   but rather only talks about the information that led you to this conclusion, aka, avoid saying
                   the json data shows etc. Also avoid giving generic descriptions like: "multiple sources
                   have reported etc." but rather provide concrete descriptions: e.g., name the sources, 
                   name the versions or software, provide links if available, etc.), and 
                   4) "confidence": ranges between 0 and 1, which indicates
                   how confident you are in your assessment, 1 being very confident.

                   You should only respond with the json object nothing more.

                   Here are the two pieces of information:

                   CVE ID: {cve_id}
                   JSON data: {cve_data}
               """

        return self._llm_client.respond(query)


def _parse_llm_response(llm_response: str) -> Optional[dict]:
    cleaned = llm_response.replace('\n', '').replace('\t', '')
    pattern = r'```json(\{.+?\})```'
    match = re.search(pattern, cleaned)

    if match:
        captured_group = match.group(1)
        result: dict = json.loads(captured_group)

        if 'assessment' in result:
            return result

        else:
            return None

    else:
        return None
